repeat
    wait()
until game:IsLoaded() and game.Players.LocalPlayer.Character:FindFirstChild("FULLY_LOADED_CHAR")
local timetoload = tick()


-- // Variables

local Players = game:GetService('Players')
local Client = Players.LocalPlayer
local CoreGui = game:GetService('CoreGui')

-- // Functions
function getHealth(target)
    if (target) then
        return tonumber(Players[target].Character.Humanoid.Health)
    else
        return 0
    end
end

function getArmor(target)
    if (target) then
        return tonumber(Players[target].Character.BodyEffects.Armor.Value)
    else
        return 0
    end
end

function getDistance(target)
    if (target) then
        return tonumber((Client.Character.HumanoidRootPart.Position - target.Character.HumanoidRootPart.Position).magnitude)
    else
        return 100
    end
end

function isWinning(target)
    if (target) then
        -- // Health
        local clientHealth = math.floor(getHealth(tostring(Client.Name)))
        local tHealth = math.floor(getHealth(target))
        
        -- // If the target has more health than our client
        if (clientHealth < tHealth) then
            return true
        else
            return false
        end
    else
        return true
    end
end

-- // Design
local healthGUI = Instance.new("ScreenGui")
local Body = Instance.new("Frame")
local TopBar = Instance.new("Frame")
local topBarCorner = Instance.new("UICorner")
local targetHeadshot = Instance.new("ImageLabel")
local targetName = Instance.new("TextLabel")
local healthBar = Instance.new("Frame")
local healthBarCorner = Instance.new("UICorner")
local healthBarBG = Instance.new("Frame")
local healthBarBGCorner = Instance.new("UICorner")
local healthIcon = Instance.new("ImageLabel")
local healthText = Instance.new("TextLabel")
local bodyCorner = Instance.new("UICorner")
local armorBar = Instance.new("Frame")
local armorBarCorner = Instance.new("UICorner")
local armorBarBG = Instance.new("Frame")
local armorBGCorner = Instance.new("UICorner")
local armorText = Instance.new("TextLabel")
local armorIcon = Instance.new("ImageLabel")
local Distance = Instance.new("TextLabel")
local Winning = Instance.new("TextLabel")

-- // Design functions
function setTargetHUDColor(color)
    armorBarBG.BackgroundColor3 = Color3.fromRGB(color)
    TopBar.BackgroundColor3 = Color3.fromRGB(color)
    healthBarBG.BackgroundColor3 = Color3.fromRGB(color)
end

-- // Rest of the UI design
healthGUI.Name = "healthGUI"
healthGUI.Parent = CoreGui

Body.Name = "Body"
Body.Parent = healthGUI
Body.AnchorPoint = Vector2.new(0.5, 0.5)
Body.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
Body.BorderSizePixel = 0
Body.ClipsDescendants = true
Body.Position = UDim2.new(0.5, 0, 0.798113227, 0)
Body.Size = UDim2.new(0, 240, 0, 131)
Body.Visible = false

TopBar.Name = "TopBar"
TopBar.Parent = Body
TopBar.AnchorPoint = Vector2.new(0.5, 0.5)
TopBar.BorderSizePixel = 0
TopBar.Position = UDim2.new(0.5, 0, 0.0199999996, 0)
TopBar.Size = UDim2.new(1, 5, 0, 6)

topBarCorner.CornerRadius = UDim.new(0, 5)
topBarCorner.Name = "topBarCorner"
topBarCorner.Parent = TopBar

targetHeadshot.Name = "targetHeadshot"
targetHeadshot.Parent = Body
targetHeadshot.AnchorPoint = Vector2.new(0.5, 0.5)
targetHeadshot.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
targetHeadshot.BackgroundTransparency = 1
targetHeadshot.BorderSizePixel = 0
targetHeadshot.Position = UDim2.new(0.25, 0, 0.519999981, 0)
targetHeadshot.Size = UDim2.new(0, 100, 0, 100)
targetHeadshot.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"

targetName.Name = "targetName"
targetName.Parent = Body
targetName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
targetName.BackgroundTransparency = 1.000
targetName.BorderSizePixel = 0
targetName.Position = UDim2.new(0.491666675, 0, 0.137404576, 0)
targetName.Size = UDim2.new(0, 113, 0, 12)
targetName.Font = Enum.Font.Roboto
targetName.Text = "1fzn"
targetName.TextColor3 = Color3.fromRGB(255, 255, 255)
targetName.TextSize = 14.000
targetName.TextXAlignment = Enum.TextXAlignment.Left
targetName.TextScaled = true

healthBar.Name = "healthBar"
healthBar.Parent = Body
healthBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
healthBar.BorderSizePixel = 0
healthBar.Position = UDim2.new(0.491666675, 0, 0.290076345, 0)
healthBar.Size = UDim2.new(0, 113, 0, 17)

healthBarCorner.CornerRadius = UDim.new(0, 2)
healthBarCorner.Name = "healthBarCorner"
healthBarCorner.Parent = healthBar

healthBarBG.Name = "healthBarBG"
healthBarBG.Parent = healthBar
healthBarBG.BorderSizePixel = 0
healthBarBG.Size = UDim2.new(1, 0, 0, 17)

healthBarBGCorner.CornerRadius = UDim.new(0, 3)
healthBarBGCorner.Name = "healthBarBGCorner"
healthBarBGCorner.Parent = healthBarBG

healthIcon.Name = "healthIcon"
healthIcon.Parent = healthBar
healthIcon.AnchorPoint = Vector2.new(0.5, 0.5)
healthIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
healthIcon.BackgroundTransparency = 1.000
healthIcon.BorderSizePixel = 0
healthIcon.Position = UDim2.new(0.0799999982, 0, 0.5, 0)
healthIcon.Size = UDim2.new(0, 12, 0, 13)
healthIcon.Image = "rbxassetid://3192484653"

healthText.Name = "healthText"
healthText.Parent = healthBar
healthText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
healthText.BackgroundTransparency = 1.000
healthText.BorderSizePixel = 0
healthText.Size = UDim2.new(0, 113, 0, 17)
healthText.Font = Enum.Font.Roboto
healthText.Text = "100"
healthText.TextColor3 = Color3.fromRGB(255, 255, 255)
healthText.TextSize = 14.000

bodyCorner.CornerRadius = UDim.new(0, 3)
bodyCorner.Name = "bodyCorner"
bodyCorner.Parent = Body

armorBar.Name = "armorBar"
armorBar.Parent = Body
armorBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
armorBar.BorderSizePixel = 0
armorBar.Position = UDim2.new(0.492000014, 0, 0.449999988, 0)
armorBar.Size = UDim2.new(0, 113, 0, 17)

armorBarCorner.CornerRadius = UDim.new(0, 2)
armorBarCorner.Name = "armorBarCorner"
armorBarCorner.Parent = armorBar

armorBarBG.Name = "armorBarBG"
armorBarBG.Parent = armorBar
armorBarBG.BorderSizePixel = 0
armorBarBG.Size = UDim2.new(0.513274312, 0, 0, 17)

armorBGCorner.CornerRadius = UDim.new(0, 3)
armorBGCorner.Name = "armorBGCorner"
armorBGCorner.Parent = armorBarBG

armorText.Name = "armorText"
armorText.Parent = armorBar
armorText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
armorText.BackgroundTransparency = 1.000
armorText.BorderSizePixel = 0
armorText.Size = UDim2.new(0, 113, 0, 17)
armorText.Font = Enum.Font.Roboto
armorText.Text = "50"
armorText.TextColor3 = Color3.fromRGB(255, 255, 255)
armorText.TextSize = 14.000

armorIcon.Name = "armorIcon"
armorIcon.Parent = armorBar
armorIcon.AnchorPoint = Vector2.new(0.5, 0.5)
armorIcon.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
armorIcon.BackgroundTransparency = 1.000
armorIcon.BorderSizePixel = 0
armorIcon.Position = UDim2.new(0.0799999982, 0, 0.5, 0)
armorIcon.Size = UDim2.new(0, 12, 0, 13)
armorIcon.Image = "rbxassetid://7169354142"

Distance.Name = "Distance"
Distance.Parent = Body
Distance.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Distance.BackgroundTransparency = 1.000
Distance.BorderSizePixel = 0
Distance.Position = UDim2.new(0.491666675, 0, 0.78, 0)
Distance.Size = UDim2.new(0, 110, 0, 17)
Distance.Font = Enum.Font.Roboto
Distance.Text = "Distance: 98 studs"
Distance.TextColor3 = Color3.fromRGB(255, 255, 255)
Distance.TextSize = 13.000
Distance.TextXAlignment = Enum.TextXAlignment.Left

Winning.Name = "Winning"
Winning.Parent = Body
Winning.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Winning.BackgroundTransparency = 1.000
Winning.BorderSizePixel = 0
Winning.Position = UDim2.new(0.491666675, 0, 0.620000005, 0)
Winning.Size = UDim2.new(0, 110, 0, 17)
Winning.Font = Enum.Font.Roboto
Winning.Text = "Winning: true"
Winning.TextColor3 = Color3.fromRGB(255, 255, 255)
Winning.TextSize = 13.000
Winning.TextXAlignment = Enum.TextXAlignment.Left
_G.ArmorBAR = Color3.fromRGB(255, 0, 4)
 _G.TOPBAR =Color3.fromRGB(255, 0, 4)
_G.healthBarBG = Color3.fromRGB(255, 0, 4)
armorBarBG.BackgroundColor3 = _G.ArmorBAR

TopBar.BackgroundColor3 = _G.TOPBAR

healthBarBG.BackgroundColor3 = _G.healthBarBG
local CC = game:GetService("Workspace").CurrentCamera
local LocalMouse = game.Players.LocalPlayer:GetMouse()
local Locked = false
local cc = game:GetService("Workspace").CurrentCamera
local gs = game:GetService("GuiService")
local Players, Client, Mouse, Camera =
    game:GetService("Players"),
    game:GetService("Players").LocalPlayer,
    game:GetService("Players").LocalPlayer:GetMouse(),
    game:GetService("Workspace").CurrentCamera
local ggi = gs.GetGuiInset
local lp = game:GetService("Players").LocalPlayer
local mouse = lp:GetMouse()

local Storage = {
    Idle = game.Players.LocalPlayer.Character.Animate.idle.Animation1.AnimationId,
    Run = game.Players.LocalPlayer.Character.Animate.run.RunAnim.AnimationId,
    Walk = game.Players.LocalPlayer.Character.Animate.walk.WalkAnim.AnimationId,
    Face = nil,
    RightFootMeshID = game.Players.LocalPlayer.Character.RightFoot.MeshId,
    RightLowerLegMeshID = game.Players.LocalPlayer.Character.RightLowerLeg.MeshId,
    RightUpperLegMeshID = game.Players.LocalPlayer.Character.RightUpperLeg.MeshId,
    RightFootTransparency = game.Players.LocalPlayer.Character.RightUpperLeg.TextureID,
    RightLowerLegTransparency = game.Players.LocalPlayer.Character.RightLowerLeg.Transparency
}
pcall(
    function()
        if (game.Players.LocalPlayer.Character.Head.face.Texture ~= nil) then
            Storage.Face = game.Players.LocalPlayer.Character.Head.face.Texture
        end
    end
)

local Script = {
    Name = "Adapt" --\\ This is used for notification.
}
local Misc = {
  
    Speed = false,
    Value = 0.6,
    NewSpeed = false,
    NewSpeedValue = 110,
    SpinAngle2 = -250,
    Spinbot = false,
    Jitter = false,
    JitterAngle = math.random(30, 90),
    SpinAngle = 60,
    Spin = false,
    AutoEat = false,
    SpinVelocity = -250,
    SpinAngle = 555,
    Slingshot = false,
    SlingshotValue = 0.999,
    AntiStomp = false,
    AutoReload = false,
    AutoStomp = false,
    TrashTalk = false,
    AntiLock = false,
    AntilockSpeed = 0.260319,
    AntiBag = false,
    Confusion = false,
    AutoPickCash = false,
    AutoDropCash = false,
    RemoveJumpCooldown = false,
    FakeLag = false,
    BunnyHop = false
}
getgenv().Aimbot = {
    Enabled = false,
    Notification = false,
    Keybind = Enum.KeyCode.Q,
    Hitbox = "HumanoidRootPart",
    HitAirshots = false,
    AirshotPart = "RightFoot",
    Resolver = false,
    Backup = "HumanoidRootPart",
    PredictionEnabled = false,
    Prediction = 1.13684,
    AutoSetup = false,
    Smoothing = true,
    Smoothness = 0.015,
    Radius = 120
}

getgenv().Silent = {
    Enabled = false,
    Key = Enum.KeyCode.Q,
    Prediction = 1.132,
    Airshot = false,
    AirshotPart = "RightFoot",
    Backup = "HumanoidRootPart",
    Notification = true,
    WallCheck = true,
    Part = "LowerTorso",
    RandomPart = false,
    AutoSetup = false,
    AutoTarget = false,
    LookAt = true,
    Radius = 120,
    TargetStats = false,
    RainbowTargetStats = false
}
getgenv().Tracer = false




local TimeTick
TimeTick =
    hookfunction(
    wait,
    function(JumpCooldown)
        if JumpCooldown == 1.5 and Misc.RemoveJumpCooldown or Misc.BunnyHop then
            return TimeTick()
        end
        return TimeTick(JumpCooldown)
    end
)

local Locking = false
game:GetService("UserInputService").InputBegan:Connect(
    function(Key, Typing)
        if (not Typing) then
            if (Key.KeyCode == Aimbot.Keybind) then
                if Aimbot.Enabled then
                    Locking = not Locking
                    if Locking then
                        AimbotVictim = AimbotGetClosest()
                        if Aimbot.Notification then
                            x(AimbotVictim.Character.Humanoid.DisplayName, 3,'rbxthumb://type=AvatarHeadShot&id=' .. AimbotVictim.UserId .. '&w=420&h=420')
                        elseif not Locking then
                            if AimbotVictim then
                                AimbotVictim = nil
                                if Aimbot.Notification then
                                    x("Unlocked",nil)
                                end
                            end
                        end
                    end
                end
            end
        end
    end
)
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Blissful4992/ESPs/main/3D%20Drawing%20Api.lua"))()
local Circle = Library:New3DCircle()
Circle.Visible = true
Circle.ZIndex = 1
Circle.Transparency = 1
Circle.Color = Color3.fromRGB(0, 255, 255)
Circle.Thickness = 1
Circle.Radius = 6
local delta = 0
local duration = 0.5
local target_strafe = false
game:GetService("RunService").Stepped:Connect(
    function(a, b)
        if Plr ~= nil and target_strafe then
            delta = (delta + b/duration) % 1
            Circle.Visible = true
            Circle.Position = Plr.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.Angles(0, 2 * math.pi * delta, 0)* CFrame.new(0, 0, Circle.Radius)+ Plr.Character.HumanoidRootPart.Position
        else
            Circle.Visible = false
        end
         armorBarBG.BackgroundColor3 = _G.ArmorBAR

TopBar.BackgroundColor3 = _G.TOPBAR

healthBarBG.BackgroundColor3 =_G.healthBarBG
        if Silent.RainbowTargetStats then
        armorBarBG.BackgroundColor3 = Color3.fromHSV(tick() % 5 / 5, 1, 1)

TopBar.BackgroundColor3 = Color3.fromHSV(tick() % 5 / 5, 1, 1)

healthBarBG.BackgroundColor3 = Color3.fromHSV(tick() % 5 / 5, 1, 1)


end
        if AimbotVictim ~= nil and Aimbot.Enabled and Aimbot.Smoothing then
            local Main =
                CFrame.new(
                workspace.CurrentCamera.CFrame.p,
                AimbotVictim.Character[Aimbot.Hitbox].Position +
                    AimbotVictim.Character[Aimbot.Hitbox].Velocity * Aimbot.Prediction / 10
            )
            workspace.CurrentCamera.CFrame =
                workspace.CurrentCamera.CFrame:Lerp(
                Main,
                Aimbot.Smoothness,
                Enum.EasingStyle.Elastic,
                Enum.EasingDirection.InOut
            )
        end
        if Locking and AimbotVictim ~= nil and Aimbot.Enabled and not Aimbot.Smoothing then
            workspace.CurrentCamera.CFrame =
                CFrame.new(
                workspace.CurrentCamera.CFrame.Position,
                AimbotVictim.Character[Aimbot.Hitbox].Position +
                    AimbotVictim.Character[Aimbot.Hitbox].Velocity * Aimbot.Prediction / 10
            )
        end
        if Locking and Aimbot.Enabled and not Aimbot.Smoothing and not Aimbot.PredictionEnabled then
            workspace.CurrentCamera.CFrame =
                CFrame.new(workspace.CurrentCamera.CFrame.Position, AimbotVictim.Character[Aimbot.Hitbox].Position)
        end
        if Aimbot.HitAirshots == true then
            if AimbotVictim.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                Aimbot.Hitbox = Aimbot.AirshotPart
            else
                Aimbot.Hitbox = Aimbot.Backup
            end
        end
        if Misc.BunnyHop then
                    if game.Players.LocalPlayer.Character.Humanoid.FloorMaterial == Enum.Material.Air then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame + game.Players.LocalPlayer.Character.Humanoid.MoveDirection * 0.17
            end
        end
    end
)
loadstring(game:HttpGet("https://pastebin.com/raw/chaGRRFm"))()

local Tracer = Drawing.new("Line")
Tracer.Visible = false
Tracer.Color = Color3.fromRGB(0, 166, 88)
Tracer.Thickness = 1
Tracer.Transparency = 1
_G.TracerVisible = false
_G.TracerColor = Color3.fromRGB(255, 170, 0)
_G.TracerThickness = 2
_G.TracerTransparency = 1

function x(tx,ic)
    game.StarterGui:SetCore(
        "SendNotification",
        {
            Title = Script.Name,
            Text = tx,
            Duration = 3.6,
            Icon = ic
        }
    )
end
function GetGun()
    if game.Players.LocalPlayer.Character then
        for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if v:FindFirstChild "Ammo" then
                return v
            end
        end
    end
    return nil
end
BulletTracers = true
local Services = {
    Players = game:GetService("Players"),
    UserInputService = game:GetService("UserInputService"),
    RunService = game:GetService("RunService")
}

local Local = {
    Player = Services.Players.LocalPlayer,
    Mouse = Services.Players.LocalPlayer:GetMouse()
}
local Other = {
    Camera = workspace.CurrentCamera,
    BeamPart = Instance.new("Part", workspace)
}

Other.BeamPart.Name = "BeamPart"
Other.BeamPart.Transparency = 1
local Settings = {
    StartColor = MainAccentColor,
    EndColor = MainAccentColor,
    StartWidth = 3,
    EndWidth = 3,
    ShowImpactPoint = false,
    ImpactTransparency = 0.5,
    ImpactColor = Color3.new(1, 1, 1),
    Time = 1
}
local funcs = {}
Local.Mouse.TargetFilter = Other.BeamPart
function funcs:Beam(v1, v2)
    v2 = Vector3.new(v2.X - 0.1, v2.Y + 0.2, v2.Z)
    local colorSequence =
        ColorSequence.new(
        {
            ColorSequenceKeypoint.new(0, bullet_tracer_color),
            ColorSequenceKeypoint.new(1, bullet_tracer_color)
        }
    )
    local Part = Instance.new("Part", Other.BeamPart)
    Part.Size = Vector3.new(0, 0, 0)
    Part.Massless = true
    Part.Transparency = 1
    Part.CanCollide = false
    Part.Position = v1
    Part.Anchored = true
    local Attachment = Instance.new("Attachment", Part)
    local Part2 = Instance.new("Part", Other.BeamPart)
    Part2.Size = Vector3.new(0, 0, 0)
    Part2.Transparency = 0
    Part2.CanCollide = false
    Part2.Position = v2
    Part2.Anchored = true
    Part2.Material = Enum.Material.ForceField
    Part2.Color = Settings.ImpactColor
    Part2.Massless = true
    local Attachment2 = Instance.new("Attachment", Part2)
    local Beam = Instance.new("Beam", Part)
    Beam.FaceCamera = true
    Beam.Color = colorSequence
    Beam.Attachment0 = Attachment
    Beam.Attachment1 = Attachment2
    Beam.LightEmission = 6
    Beam.LightInfluence = 1
    Beam.Width0 = Settings.StartWidth
    Beam.Width1 = Settings.EndWidth
    Beam.Texture = "http://www.roblox.com/asset/?id=9150663556"
    Beam.TextureSpeed = 2
    Beam.TextureLength = 1
    delay(
        Settings.Time,
        function()
            Part:Destroy()
            Part2:Destroy()
        end
    )
end
spawn(
    function()
        while task.wait(0.5) do
            gun = GetGun()
            if gun then
                LastAmmo = gun.Ammo.Value
                gun.Ammo:GetPropertyChangedSignal("Value"):Connect(
                    function()
                        if BulletTracers and gun.Ammo.Value < LastAmmo then
                            LastAmmo = gun.Ammo.Value
                            if getgenv().Silent.Enabled and Plr ~= nil then
                                if getgenv().Silent.PredictionEnabled then
                                    funcs:Beam(gun.Handle.Position, Plr.Character[getgenv().Silent.Part].Position + (Plr.Character[getgenv().Silent.Part].Velocity * Silent.Prediction / 10))
                                        else
                                    funcs:Beam(gun.Handle.Position, Plr.Character[getgenv().Silent.Part].Position)
                                end
                            else
                                funcs:Beam(gun.Handle.Position, Local.Mouse.hit.p)
                            end
                        end
                    end
                )
            end
        end
    end
)
game:GetService("UserInputService").InputBegan:Connect(
    function(keygo, ok)
        if (not ok) then
            if (keygo.KeyCode == getgenv().Silent.Key) then
                if getgenv().Silent.Enabled then
                    Locked = not Locked
                    if Locked then
                        Plr = SilentGetClosest()
                        if Silent.Notification then
                            pcall(
                                function()
                                    x(Plr.Character.Humanoid.DisplayName,'rbxthumb://type=AvatarHeadShot&id=' .. Plr.UserId .. '&w=420&h=420')
                                end
                            )
                        end
                    elseif not Locked then
                        if Plr then
                            Plr = nil
                            if Silent.Notification then
                                x("Unlocked!",nil)
                            end
                        end
                    end
                end
            end
        end
    end
)

function AimbotWallCheck(destination, ignore)
    if (getgenv().Aimbot.WallCheck) then
        local Origin = Camera.CFrame.p
        local CheckRay = Ray.new(Origin, destination - Origin)
        local Hit = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(CheckRay, ignore)
        return Hit == nil
    else
        return true
    end
end

function AimbotGetClosest()
    local closestPlayer
    local shortestDistance = getgenv().Aimbot.Radius

    for _, plr in next, Players:GetPlayers() do
        if (plr ~= Client) then
            local Character = plr.Character
            local notKO = Character:WaitForChild("BodyEffects")["K.O"].Value ~= true
            local notGrabbed = Character:FindFirstChild("GRABBING_COINSTRAINT") == nil
            if (Character and Character ~= Client and Character.Humanoid.Health > 1 and notKO and notGrabbed) then
                local ScreenPosition, IsVisibleOnViewPort =
                    Camera:WorldToViewportPoint(Character.HumanoidRootPart.Position)
                if (IsVisibleOnViewPort and AimbotWallCheck(Character.HumanoidRootPart.Position, {Client, Character})) then
                    local MDistance =
                        (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPosition.X, ScreenPosition.Y)).Magnitude
                    if (MDistance < shortestDistance) then
                        closestPlayer = plr
                        shortestDistance = MDistance
                    end
                end
            end
        end
    end
    if (closestPlayer ~= nil) then
        return closestPlayer
    else
        return nil
    end
end

function SilentWallCheck(destination, ignore)
    if (getgenv().Silent.WallCheck) then
        local Origin = Camera.CFrame.p
        local CheckRay = Ray.new(Origin, destination - Origin)
        local Hit = game:GetService("Workspace"):FindPartOnRayWithIgnoreList(CheckRay, ignore)
        return Hit == nil
    else
        return true
    end
end

function SilentGetClosest()
    local closestPlayer
    local shortestDistance = getgenv().Silent.Radius

    for _, plr in next, Players:GetPlayers() do
        if (plr ~= Client) then
            local Character = plr.Character
            local notKO = Character:WaitForChild("BodyEffects")["K.O"].Value ~= true
            local notGrabbed = Character:FindFirstChild("GRABBING_COINSTRAINT") == nil
            if (Character and Character ~= Client and Character.Humanoid.Health > 1 and notKO and notGrabbed) then
                local ScreenPosition, IsVisibleOnViewPort =
                    Camera:WorldToViewportPoint(Character.HumanoidRootPart.Position)
                if (IsVisibleOnViewPort and SilentWallCheck(Character.HumanoidRootPart.Position, {Client, Character})) then
                    local MDistance =
                        (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(ScreenPosition.X, ScreenPosition.Y)).Magnitude
                    if (MDistance < shortestDistance) then
                        closestPlayer = plr
                        shortestDistance = MDistance
                    end
                end
            end
        end
    end
    if (closestPlayer ~= nil) then
        return closestPlayer
    else
        return nil
    end
end

local rawmetatable = getrawmetatable(game)
local old = rawmetatable.__namecall
setreadonly(rawmetatable, false)
rawmetatable.__namecall =
    newcclosure(
    function(...)
        local args = {...}
        if
            Plr ~= nil and getgenv().Silent.Enabled and getnamecallmethod() == "FireServer" and
                args[2] == "UpdateMousePos"
         then
            if getgenv().Silent.PredictionEnabled then
                args[3] =
                    Plr.Character[getgenv().Silent.Part].Position +
                    (Plr.Character[getgenv().Silent.Part].Velocity * Silent.Prediction / 10)
            else
                args[3] = Plr.Character[getgenv().Silent.Part].Position
            end
            return old(unpack(args))
        end
        return old(...)
    end
)

game:GetService("RunService").Stepped:connect(
    function()
        if getgenv().Mousemoverel.Enabled and MouseVictim ~= nil then
            pcall(
                function()
                    local goal =
                        CC:WorldToScreenPoint(
                        MouseVictim.Character[getgenv().Mousemoverel.Part].Position +
                            (MouseVictim.Character[getgenv().Mousemoverel.Part].Velocity *
                                getgenv().Mousemoverel.Prediction /
                                10)
                    )
                    mousemoverel(goal.X - LocalMouse.X, goal.Y - LocalMouse.Y)
                end
            )
        end

        if getgenv().Mousemoverel.Airshot then
            if MouseVictim.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                getgenv().Partz = "RightFoot"
            else
                getgenv().Partz = "LowerTorso"
            end
        end
        if Misc.Speed then
            if Misc.AntiLock == false then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame +
                    game.Players.LocalPlayer.Character.Humanoid.MoveDirection * Misc.Value
            end
        end

        if Misc.NewSpeed then
            if game.Players.LocalPlayer.Character.Humanoid.FloorMaterial ~= Enum.Material.Air then
                game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                    game.Players.LocalPlayer.Character.Humanoid.MoveDirection * Misc.NewSpeedValue
            end
        end
        if Misc.Spinbot then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame *
                CFrame.Angles(0, math.rad(Misc.SpinAngle), 0)
        end
        if Misc.Jitter then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.Position) *
                CFrame.Angles(
                    0,
                    math.rad(Misc.SpinAngle) +
                        math.rad((math.random(1, 2) == 1 and Misc.JitterAngle or -Misc.JitterAngle)),
                    0
                )
        end
        pcall(
            function()
                if BulletTracers  then
                    game:GetService("Workspace").Ignored.BULLET_RAYS:Destroy()
                end
            end
        )
        if Misc.Spin then
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame.lookVector * Misc.SpinVelocity
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame *
                CFrame.Angles(0, math.rad(Misc.SpinAngle2), 0)
        end
        if Misc.Slingshot then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, Misc.SlingshotValue, 0)
            wait(0.2)
        end
        if Misc.AntiStomp then
            if game.Players.LocalPlayer.Character:WaitForChild("BodyEffects")["K.O"].Value == true or game.Players.LocalPlayer.Character:FindFirstChild("GRABBING_CONSTRAINT")  then
                for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v:Destroy()
                    end
                end
            end
        end

        if Misc.AutoReload then
            pcall(
                function()
                    if
                        game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool"):FindFirstChild(
                            "Ammo"
                        ).Value == 0
                     then
                        game:GetService("ReplicatedStorage").MainEvent:FireServer(
                            "Reload",
                            game:GetService("Players").LocalPlayer.Character:FindFirstChildWhichIsA("Tool")
                        )
                    end
                end
            )
        end
        if Misc.AutoStomp then
            game.ReplicatedStorage.MainEvent:FireServer("Stomp")
        end
        if Misc.TrashTalk then
            wait(0.6)
            game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(
                "ADAPT OWNS YOU",
                "All"
            )
            wait(5)
        end
        if Misc.AntiBag then
            pcall(function()
            game.Players.LocalPlayer.Character["Christmas_Sock"]:Destroy()
            end)
    end
        if Misc.AntiLock then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame +
                -game.Players.LocalPlayer.Character.Humanoid.MoveDirection * Misc.AntilockSpeed
        end

        if Misc.Confusion then
            game.Players.LocalPlayer.Character.Head.CanCollide = false
            game.Players.LocalPlayer.Character.UpperTorso.CanCollide = false
            game.Players.LocalPlayer.Character.LowerTorso.CanCollide = false
            game.Players.LocalPlayer.Character.HumanoidRootPart.CanCollide = false
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame *
                CFrame.new(math.random(1, 2) == 1 and 2 or -2, 0, 0)
        else
            game.Players.LocalPlayer.Character.Head.CanCollide = true
            game.Players.LocalPlayer.Character.UpperTorso.CanCollide = true
            game.Players.LocalPlayer.Character.LowerTorso.CanCollide = true
            game.Players.LocalPlayer.Character.HumanoidRootPart.CanCollide = true
        end
        if Misc.AutoPickCash then
            pcall(
                function()
                    for _, v in pairs(Workspace.Ignored.Drop:GetChildren()) do
                        if v.Name == "MoneyDrop" then
                            local MoneyMagnitude =
                                (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
                            if MoneyMagnitude < 25 then
                                fireclickdetector(v.ClickDetector)
                            end
                        end
                    end
                end
            )
        end
        if Misc.AutoDropCash then
            game.ReplicatedStorage.MainEvent:FireServer("DropMoney", 10000)
        end
        if Misc.RandomiseToolPos then
            wait()
            pcall(
                function()
                    game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").GripPos =
                        Vector3.new(math.random(1, 2) == 1 and 2 or -2, 0, 0)
                end
            )
            wait()
        end

        if getgenv().Silent.RandomPart then
            wait()
            getgenv().Silent.Part = "HumanoidRootPart"
            wait()
            getgenv().Silent.Part = "UpperTorso"
            wait()
            getgenv().Silent.Part = "LowerTorso"
            wait()
        end
        if Misc.AutoEat then
            if game.Players.LocalPlayer.Character.Humanoid.Health < 45 then
                local Current_Position = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

                if
                    game.Players.LocalPlayer.Character:FindFirstChild("[Chicken]") == nil or
                        game.Players.LocalPlayer.Backpack:FindFirstChild("[Chicken]") == nil
                 then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                        game.Workspace.Ignored.Shop["[Chicken] - $7"].Head.CFrame
                    wait(0.5)
                    fireclickdetector(game.Workspace.Ignored.Shop["[Chicken] - $7"].ClickDetector)
                end
                pcall(
                    function()
                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(
                            game.Players.LocalPlayer.Backpack["[Chicken]"]
                        )
                    end
                )
                pcall(
                    function()
                        game.Players.LocalPlayer.Character["[Chicken]"]:Activate()
                        wait(0.1)
                        game.Players.LocalPlayer.Character["[Chicken]"]:Deactivate()
                        wait(0.1)
                        game.Players.LocalPlayer.Character["[Chicken]"]:Activate()
                        wait(0.1)
                        game.Players.LocalPlayer.Character["[Chicken]"]:Deactivate()
                        wait(0.1)
                        game.Players.LocalPlayer.Character["[Chicken]"]:Activate()
                        wait(0.1)
                        game.Players.LocalPlayer.Character["[Chicken]"]:Deactivate()
                        wait(0.1)
                        game.Players.LocalPlayer.Character["[Chicken]"]:Activate()
                        wait(0.1)
                        game.Players.LocalPlayer.Character["[Chicken]"]:Deactivate()
                    end
                )
            end
        end

        Tracer.Visible = _G.TracerVisible
        Tracer.Color = _G.TracerColor
        Tracer.Thickness = _G.TracerThickness
        Tracer.Transparency = _G.TracerTransparency
        if getgenv().Silent.Airshot == true then
            if Plr ~= nil and Plr.Character.Humanoid.FloorMaterial == Enum.Material.Air then
                getgenv().Silent.Part = getgenv().Silent.AirshotPart
            else
                getgenv().Silent.Part = getgenv().Silent.Backup
            end
        end

        if getgenv().Tracer == true and Plr ~= nil and getgenv().Silent.Enabled then
            local TorsoPosition = cc:worldToViewportPoint(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)
            local Vector, OnScreen = cc:worldToViewportPoint(Plr.Character[getgenv().Silent.Part].Position)
            Tracer.Visible = true
            Tracer.From = Vector2.new(TorsoPosition.X, TorsoPosition.Y)
            Tracer.To = Vector2.new(Vector.X, Vector.Y)
        else
            Tracer.Visible = false
        end
        if getgenv().Silent.AutoTarget then
            wait(1.65)
            Plr = SilentGetClosest()
            Locked = true
            wait(1.65)
        end
        if Plr ~= nil and getgenv().Silent.LookAt then
            game.Players.LocalPlayer.Character.Humanoid.AutoRotate = false
            local playerService = game:GetService("Players")
            local client = playerService.LocalPlayer

            local cPos = client.Character.PrimaryPart.Position
            local tPos = Plr.Character:FindFirstChild("HumanoidRootPart").Position + Plr.Character:FindFirstChild('HumanoidRootPart').Velocity * (1.02 / 10)
            local modTPos = Vector3.new(tPos.X, cPos.Y, tPos.Z)
            local newCFrame = CFrame.new(cPos, modTPos)
            client.Character:SetPrimaryPartCFrame(newCFrame)
        else
            game.Players.LocalPlayer.Character.Humanoid.AutoRotate = true
        end

        if (Plr ~= nil and getgenv().Silent.TargetStats) then
            local plrName = tostring(Plr.Name)
            local targetHealth = math.floor(getHealth(plrName))
            local targetArmor = math.floor(getArmor(plrName))
            local targetDist = math.floor(getDistance(Plr))
            local targetWinning = isWinning(plrName)

            -- // Headshot
            targetHeadshot.Image = 'rbxthumb://type=AvatarHeadShot&id=' .. Plr.UserId .. '&w=420&h=420'

            -- // Name
            targetName.Text = plrName
            if (Plr.Character.Humanoid.DisplayName ~= plrName) then
                targetName.Text = Plr.Name .. '[' .. Plr.Character.Humanoid.DisplayName .. ']'
            end

            -- // Health
            healthBarBG.Size = UDim2.new((targetHealth / 100), 0, 0, 17)
            healthText.Text = targetHealth

            -- // Armor
            armorBarBG.Size = UDim2.new((targetArmor / 200), 0, 0, 17)
            armorText.Text = targetArmor

            -- // Distance
            Distance.Text = 'Distance: ' .. targetDist .. " studs"

            -- // Winning
            if (targetWinning) then
                Winning.Text = 'Winning: Yes'
            else
                Winning.Text = 'Winning: No'
            end

            -- // Making the UI visible
            Body.Visible = true
        else
            -- // Making the UI invisible
            Body.Visible = false
        end

        if getgenv().Silent.AutoSetup then
            local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
            local split = string.split(pingvalue, " ")
            local ping = split[1]

            if tonumber(ping) <= 40 then
                getgenv().Prediction = 1.23
            elseif tonumber(ping) <= 50 then
                getgenv().Silent.Prediction = 1.286942
            elseif tonumber(ping) < 70 then
                getgenv().Silent.Prediction = 1.3031
            elseif tonumber(ping) <= 85 then
                getgenv().Silent.Prediction = 1.30984
            elseif tonumber(ping) <= 110 then
                getgenv().Silent.Prediction = 1.15569420
            elseif tonumber(ping) <= 150 then
                getgenv().Silent.Prediction = 1.165
            elseif tonumber(ping) >= 200 then
                getgenv().Silent.Prediction = 1.18684290
            end
        end
    end
)
getgenv().Mousemoverel = {
    Enabled = false,
    Key = Enum.KeyCode.Q,
    Prediction = 1.165,
    Airshot = false,
    Part = "LowerTorso" -- LowerTorso, HumanoidRootPart,Head,UpperTorso
}

local MouseLocked = false

function MouseGetClosest()
    local closestPlayer
    local shortestDistance = math.huge

    for i, v in pairs(game.Players:GetPlayers()) do
        if
            v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and
                v.Character.Humanoid.Health ~= 0 and
                v.Character:FindFirstChild("LowerTorso")
         then
            local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(LocalMouse.X, LocalMouse.Y)).magnitude
            if magnitude < shortestDistance then
                closestPlayer = v
                shortestDistance = magnitude
            end
        end
    end
    return closestPlayer
end

local UserInputService = game:GetService("UserInputService")

UserInputService.InputBegan:Connect(
    function(keygo, ok)
        if (not ok) then
            if (keygo.KeyCode == getgenv().Mousemoverel.Key) then
                MouseLocked = not MouseLocked
                if getgenv().Mousemoverel.Enabled then
                    if MouseLocked then
                        MouseVictim = MouseGetClosest()
                        x(MouseVictim.Character.Humanoid.DisplayName,'rbxthumb://type=AvatarHeadShot&id=' .. MouseVictim.UserId .. '&w=420&h=420')
                    elseif not MouseLocked then
                        if MouseVictim then
                            MouseVictim = nil
                        end
                        x("Unlocked",nil)
                    end
                end
            end
        end
    end
)

getgenv().lol = 0 
getgenv().loll = 0

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/vozoid/ui-libraries/main/drawing/void/source.lua"))()

local watermark = library:Watermark("Adapt | 60 fps | Build 4.0.0 | Private")
watermark:Set("Watermark Set")
watermark:Hide() -- toggles watermark

local main = library:Load{
    Name = "Adapt ; #1 Streamable",
    SizeX = 600,
    SizeY = 650,
    Theme = "Midnight",
    Extension = "json", -- config file extension
    Folder = "Adapt" -- config folder name
}

library.Extension = "json"
library.Folder = "adapt"

local tab = main:Tab("Aiming")

local section = tab:Section{
    Name = "CamLock",
    Side = "Left"
}

local toggle = section:Toggle{
    Name = "Enable",
    Flag = "EnableTog",
    Default = false,
    Callback  = function(e)
        getgenv().Aimbot.Enabled = e
    end
}

toggle:Keybind{
    Default = Enum.KeyCode.Q,
    Blacklist = {Enum.UserInputType.MouseButton1},
    Flag = "KeybindTog",
    Mode = "Toggle", -- mode to nil if u dont want it to toggle the toggle
    Callback = function(e)
        getgenv().Aimbot.Keybind = e
    end
}

local box = section:Box{
    Name = "Prediction Ammount",
    Default = "0",
    Placeholder = "Prediction Ammount",
    Flag = "Box 1",
    Callback = function(e)
        getgenv().Aimbot.Prediction = e
        getgenv().lol = e
    end
}

toggle:Dropdown{
    Default = "Torso",
    Content = {
        "Head",
        "Torso",
        "Penis",
        "Feet" 
    },
    Max = 5, -- turns into multidropdown
    Scrollable = true, -- makes it scrollable
    ScrollingMax = 5, -- caps the amount it contains before scrolling
    Flag = "HitboxDropdown",
    Callback = function(State)
         if State == "Head" then
            getgenv().Aimbot.Hitbox = "Head"
            getgenv().Aimbot.Backup = "Head"
        elseif State == "Torso" then
            getgenv().Aimbot.Hitbox = "HumanoidRootPart"
            getgenv().Aimbot.Backup = "HumanoidRootPart"
        elseif State == "Penis" then
            getgenv().Aimbot.Hitbox = "LowerTorso"
            getgenv().Aimbot.Backup = "LowerTorso"
        elseif State == "Feet" then
            getgenv().Aimbot.Hitbox = "RightFoot"
            getgenv().Aimbot.Backup = "RightFoot"
        end
    end
}

local toggle = section:Toggle{
    Name = "Wall Check",
    Flag = "WallCheckTog",
    Default = false,
    Callback  = function(e)
        getgenv().Aimbot.WallCheck = e
    end
}

local toggle = section:Toggle{
    Name = "Enable Notifications",
    Flag = "NotifTog",
    Default = false,
    Callback  = function(e)
       getgenv().Aimbot.Notification = e
    end
}


toggle:Dropdown{
    Default = "Airshot Hitbox",
    Content = {
        "Head",
        "Torso",
        "Penis",
        "Feet" 
    },
    --Max = 5, -- turns into multidropdown
    --Scrollable = true, -- makes it scrollable
    --ScrollingMax = 5, -- caps the amount it contains before scrolling
    Flag = "AirshotHitbox",
    Callback = function(State)
         if State == "Head" then
            getgenv().Aimbot.AirshotPart = "Head"
        elseif State == "Torso" then
            getgenv().Aimbot.AirshotPart = "HumanoidRootPart"
        elseif State == "Penis" then
            getgenv().Aimbot.AirshotPart = "LowerTorso"
        elseif State == "Feet" then
            getgenv().Aimbot.AirshotPart = "RightFoot"
        end
    end
}

local toggle = section:Toggle{
    Name = "Enable Resolver",
    Flag = "ResolverTog",
    Default = false,
    Callback  = function(e)
        Resolver = false
        if e then
            getgenv().Aimbot.Prediction = -1
        else
            getgenv().Aimbot.Prediction = getgenv().lol
        end
    end
}

local toggle = section:Toggle{
    Name = "Enable Smoothing",
    Flag = "SmoothTog",
    Default = false,
    Callback  = function(e)
        getgenv().Aimbot.Smoothing = e
    end
}

local box = section:Box{
    Name = "Smoothing Ammount",
    Default = "0.015",
    Placeholder = "Smoothing Ammount",
    Flag = "SmoothingBox",
    Callback = function(e)
        getgenv().Aimbot.Smoothness = e
    end
}



local section1 = tab:Section{
    Name = "Target Aim",
    Side = "Right"
}

local toggle1 = section1:Toggle{
    Name = "Enable",
    Flag = "EnableTog",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.Enabled = e
    end
}

toggle1:Keybind{
    Default = Enum.KeyCode.Q,
    Blacklist = {Enum.UserInputType.MouseButton1},
    Flag = "TargetKeybind",
    Mode = "Toggle", -- mode to nil if u dont want it to toggle the toggle
    Callback = function(e)
        getgenv().Silent.Key = e
    end
}

toggle:Dropdown{
    Default = "Torso",
    Content = {
        "Head",
        "Torso",
        "Penis",
        "Feet" 
    },
    --Max = 5, -- turns into multidropdown
    --Scrollable = true, -- makes it scrollable
    --ScrollingMax = 5, -- caps the amount it contains before scrolling
    Flag = "TargetAimPart",
    Callback = function(State)
         if State == "Head" then
            getgenv().Silent.Hitbox = "Head"
            getgenv().Silent.Backup = "Head"
        elseif State == "Torso" then
            getgenv().Silent.Hitbox = "HumanoidRootPart"
            getgenv().Silent.Backup = "HumanoidRootPart"
        elseif State == "Penis" then
            getgenv().Silent.Hitbox = "LowerTorso"
            getgenv().Silent.Backup = "LowerTorso"
        elseif State == "Feet" then
            getgenv().Silent.Hitbox = "RightFoot"
            getgenv().Silent.Backup = "RightFoot"
        end
    end
}

local toggle1 = section1:Toggle{
    Name = "Random Hitbox",
    Flag = "RandomHitboxToggle",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.Enabled = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Prediction Enabled",
    Flag = "PredictionEnabledTarget",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.PredictionEnabled = e
    end
}

local box = section1:Box{
    Name = "Prediction Ammount",
    Default = "1.1369420",
    Placeholder = "Prediction Ammount",
    Flag = "PredictionTextbox",
    Callback = function(e)
        getgenv().Silent.Prediction = e
        getgenv().loll = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Wall Check",
    Flag = "SilentWallCheckToggle",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.WallCheck = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Look At",
    Flag = "LookAtTog",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.LookAt = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Target Hud",
    Flag = "targetstatsflag",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.TargetStats = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Rainbow Target Hud",
    Flag = "Rainbowtargetstats",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.RainbowTargetStats = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Wall Check",
    Flag = "SilentWallCheckToggle",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.WallCheck = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Auto Target",
    Flag = "AutoTargetTog",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.AutoTarget = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Auto Setup",
    Flag = "AutoSetupTog",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.AutoSetup = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Notification Mode",
    Flag = "NotificationSilentToggle",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.Notification = e
    end
}

local toggle1 = section1:Toggle{
    Name = "Airshot Function",
    Flag = "AirshotFuncTargetToggle",
    Default = false,
    Callback  = function(e)
        getgenv().Silent.Airshot = e
    end
}

toggle1:Dropdown{
    Default = "Torso",
    Content = {
        "Head",
        "Torso",
        "Penis",
        "Feet" 
    },
    --Max = 5, -- turns into multidropdown
    --Scrollable = true, -- makes it scrollable
    --ScrollingMax = 5, -- caps the amount it contains before scrolling
    Flag = "SilentAirshotDrop",
    Callback = function(State)
         if State == "Head" then
            getgenv().Silent.AirshotPart = "Head"
        elseif State == "Torso" then
            getgenv().Silent.AirshotPart = "HumanoidRootPart"
        elseif State == "Penis" then
            getgenv().Silent.AirshotPart = "LowerTorso"
        elseif State == "Feet" then
            getgenv().Silent.AirshotPart = "RightFoot"
        end
    end
}

local toggle1 = section1:Toggle{
    Name = "Resolver",
    Flag = "AntiLockResolverSilent",
    Default = false,
    Callback  = function(e)
        Resolver = false
        if e then
            getgenv().Silent.Prediction = -1
        else
            getgenv().Silent.Prediction = getgenv().loll
        end
    end
}

local toggle1 = section1:Toggle{
    Name = "Tracer",
    Flag = "TracerFlag",
    Default = false,
    Callback  = function(e)
        getgenv().Tracer = e
    end
}

local colorpicker = section1:ColorPicker{
    Name = "Tracer Color",
    Default = Color3.fromRGB(0, 255, 0),
    Flag = "TracerColorFlag",
    Callback = function(xd)
        _G.TracerColor = xd
    end
}

local colorpicker = section1:ColorPicker{
    Name = "Hud Color",
    Default = Color3.fromRGB(0, 255, 0),
    Flag = "targetstatsflag",
    Callback = function(xd)
_G.ArmorBAR = xd
 _G.TOPBAR = xd
_G.healthBarBG = xd
    end
}

local toggle1 = section1:Toggle{
    Name = "Orbit-Strafe",
    Flag = "TRGT_STRAFE",
    Default = false,
    Callback  = function(e)
        target_strafe = e
    end
}

toggle1:Slider{
    Text = "Orbit Speed",
    Default = 6,
    Min = 1,
    Max = 15,
    Float = 0.5,
    Flag = "ORBT_SPEED",
    Callback = function(a)
        duration = a/5
    end
}

toggle1:Slider{
    Text = "Orbit Distance",
    Default = 6,
    Min = 1,
    Max = 15,
    Float = 0.5,
    Flag = "DISTANCE",
    Callback = function(a)
        Circle.Radius = a
    end
}

local colorpicker = section1:ColorPicker{
    Name = "Orbit Color",
    Default = Color3.fromRGB(0, 255, 0),
    Flag = "STRAFE_COLOR",
    Callback = function(xd)
          Circle.Color = color
    end
}



local section2 = tab:Section{
    Name = "Mouse Lock",
    Side = "Left"
}

local toggle2 = section2:Toggle{
    Name = "Enable",
    Flag = "MouseLockToggle",
    Default = false,
    Callback  = function(e)
        getgenv().Mousemoverel.Enabled = e
    end
}

toggle2:Keybind{
    Default = Enum.KeyCode.Q,
    Blacklist = {Enum.UserInputType.MouseButton1},
    Flag = "CamlockBind",
    Mode = "Toggle", -- mode to nil if u dont want it to toggle the toggle
    Callback = function(e)
        getgenv().Mousemoverel.Key = e
    end
}

local box = section2:Box{
    Name = "Prediction Ammount",
    Default = "1.165",
    Placeholder = "Prediction Ammount",
    Flag = "MouseLockPredictionTextbox",
    Callback = function(e)
        getgenv().Mousemoverel.Prediction = e
    end
}

toggle:Dropdown{
    Default = "Torso",
    Content = {
        "Head",
        "Torso",
        "Penis",
        "Feet" 
    },
    --Max = 5, -- turns into multidropdown
    --Scrollable = true, -- makes it scrollable
    --ScrollingMax = 5, -- caps the amount it contains before scrolling
    Flag = "MouseLockAimPart",
    Callback = function(State)
         if State == "Head" then
            getgenv().Mousemoverel.Part = "Head"
        elseif State == "Torso" then
            getgenv().Mousemoverel.Part = "HumanoidRootPart"
        elseif State == "Penis" then
            getgenv().Mousemoverel.Part = "LowerTorso"
        elseif State == "Feet" then
            getgenv().Mousemoverel.Part = "RightFoot"
        end
    end
}

local tab1 = main:Tab("Visuals")

local section3 = tab1:Section{
    Name = "Character",
    Side = "Left"
}

local toggle2 = section2:Toggle{
    Name = "SuperHuman",
    Flag = "SuperHumanToggle",
    Default = false,
    Callback  = function(e)
        getgenv().es_pedofilo = e
    end
}

local toggle2 = section2:Toggle{
    Name = "Speed",
    Flag = "SpeedToggle",
    Default = false,
    Callback  = function(e)
        Misc.NewSpeed = e
    end
}

toggle2:Slider{
    Text = "Speed Ammount",
    Default = 110,
    Min = 0,
    Max = 350,
    Float = 0.5,
    Flag = "NewSpeedSliderValue",
    Callback = function(e)
        Misc.NewSpeedValue = e
    end
}

